const bcrypt = require('bcrypt');
const crypto = require('crypto');
const db = require('../db');
const jwt = require('jsonwebtoken');
const Token = require('../middleware/jwtMiddleware'); // Mod√®le pour la table Token
const {
  createParticipantQuery,
  getParticipantByEmailQuery,
  getEventByIdQuery,
  getParticipantByIdQuery,
  updateParticipantQuery
} = require('../queries');
const { sendActivationEmail } = require('./ParticipantEmailService');


// R√©cup√©rer tous les participants
exports.getAllParticipants = async (req, res) => {
  try {
      const participants = await db('participants').select('*');
      res.status(200).json(participants);
  } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des participants :", error);
      res.status(500).json({ message: "Erreur serveur." });
  }
};

// Supprimer un participant
exports.deleteParticipant = async (req, res) => {
  const { id } = req.params;
  try {
      const deletedRows = await db('participants').where({ id_participant: id }).del();
      if (deletedRows) {
          res.status(200).json({ message: "Participant supprim√© avec succ√®s." });
      } else {
          res.status(404).json({ message: "Participant non trouv√©." });
      }
  } catch (error) {
      console.error("Erreur lors de la suppression du participant :", error);
      res.status(500).json({ message: "Erreur serveur." });
  }
};
// R√©cup√©rer le nombre total de participants
exports.getParticipantCount = async (req, res) => {
  try {
    const count = await db('participants').count('id_participant as total').first();
    res.status(200).json({ total: count.total });
  } catch (error) {
    console.error("Erreur lors du comptage des participants :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};
//controler pour afficher les donne de participant dans son tableau de bord

exports.registerOrLoginParticipant = async (req, res) => {
  const { nom_part, email_part, mdp_part, genre_part, telephone_part, ville_part, codepostal_part, id_evenement } = req.body;

  try {
    console.log("üîç Donn√©es re√ßues :", req.body);

    // V√©rifier si l'√©v√©nement existe
    const event = await db('evenement').where({ id_evenement }).first();
    if (!event) {
      console.error("‚ùå √âv√©nement non trouv√© pour l'ID :", id_evenement);
      return res.status(400).json({ message: "√âv√©nement non trouv√©." });
    }
    const id_organisateur = event.id_organisateur;

    // V√©rifier si le participant existe d√©j√†
    let participant = await db('participants').where({ email_part }).first();

    if (!participant) {
      // üîπ **Cr√©er un nouveau participant**
      console.log("üÜï Cr√©ation d'un nouveau participant...");

      // Validation des champs obligatoires
      if (!nom_part || !email_part || !mdp_part || !telephone_part || !ville_part || !codepostal_part) {
        console.error("‚ùå Un champ obligatoire est manquant.");
        return res.status(400).json({ message: "Tous les champs obligatoires doivent √™tre remplis." });
      }

      // Validation du num√©ro de t√©l√©phone
      const phoneRegex = /^\+\d{1,3}\d{8,12}$/;
      if (!phoneRegex.test(telephone_part)) {
        console.error("‚ùå Num√©ro de t√©l√©phone invalide :", telephone_part);
        return res.status(400).json({ message: "Num√©ro de t√©l√©phone invalide." });
      }

      // Hashage du mot de passe
      console.log("üîë Hashage du mot de passe...");
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(mdp_part, salt);

      // Ins√©rer le participant dans la base de donn√©es
      const [participantId] = await db('participants').insert({
        nom_part,
        email_part,
        mdp_part: hashedPassword,
        genre_part,
        telephone_part,
        ville_part,
        codepostal_part,
        id_organisateur,
        statut_part: "En attente",
        date_inscription: new Date().toISOString().split("T")[0],
      });

      console.log("‚úÖ Nouveau participant cr√©√© avec ID :", participantId);
      participant = { id_participant: participantId };
    } else {
      // üîπ **Le participant existe d√©j√† ‚Üí V√©rifier son mot de passe**
      console.log("üîÑ Connexion d'un participant existant...");
      const isPasswordValid = await bcrypt.compare(mdp_part, participant.mdp_part);
      if (!isPasswordValid) {
        console.error("‚ùå Mot de passe incorrect pour :", email_part);
        return res.status(401).json({ message: "Mot de passe incorrect." });
      }
    }

    // üîπ V√©rifier si le participant est d√©j√† inscrit √† cet √©v√©nement
    const existingParticipation = await db('participer')
      .where({ id_participant: participant.id_participant, id_evenement })
      .first();

    if (existingParticipation) {
      console.warn(`‚ö†Ô∏è Le participant avec l'email ${email_part} est d√©j√† inscrit √† cet √©v√©nement.`);
      return res.status(400).json({ message: "Vous √™tes d√©j√† inscrit √† cet √©v√©nement." });
    }

    // üîπ Inscrire le participant √† l'√©v√©nement
    await db('participer').insert({
      id_participant: participant.id_participant,
      id_evenement,
    });

    console.log("‚úÖ Inscription √† l'√©v√©nement r√©ussie.");

    // üîπ G√©n√©ration du token JWT
    const token = jwt.sign(
      { id_participant: participant.id_participant, email: participant.email_part },
      process.env.JWT_SECRET,
      { expiresIn: "24h" }
    );

    return res.status(201).json({
      message: "Inscription r√©ussie.",
      participantId: participant.id_participant,
      token,
    });

  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    return res.status(500).json({ message: "Erreur serveur." });
  }
};

exports.getParticipantProfile = async (req, res) => {
  const { participantId } = req.params;

  try {
    const participant = await getParticipantByIdQuery(participantId);
    console.log(await getParticipantByIdQuery(participantId)); // Ajoutez ceci dans votre contr√¥leur pour d√©boguer

    if (!participant) {
      return res.status(404).json({ message: "Participant non trouv√©." });
    }

    res.status(200).json(participant);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des donn√©es du participant :', error);
    res.status(500).json({ message: 'Erreur serveur.' });
  }
};

// Contr√¥leur de connexion pour le participant
exports.loginParticipant = async (req, res) => {
  const { email, password } = req.body;

  try {

    // V√©rifiez les champs envoy√©s depuis le frontend
    console.log("Email re√ßu depuis le frontend :", email);
    console.log("Mot de passe re√ßu depuis le frontend :", password);

    // Validation des champs d'entr√©e
    if (!email || !password) {
      return res.status(400).json({ message: 'Email et mot de passe sont obligatoires.' });
    }

    // R√©cup√©rer le participant par email
    const participant = await getParticipantByEmailQuery(email);
    console.log("Participant r√©cup√©r√© depuis la base de donn√©es :", participant);
    if (!participant) {
      return res.status(404).json({ message: 'Participant non trouv√©.' });
    }

    // V√©rifiez si le mot de passe hash√© est pr√©sent dans la base de donn√©es
    console.log("Mot de passe hash√© dans la base de donn√©es :", participant.mdp_participant);

    // V√©rifiez si le mot de passe hash√© est pr√©sent dans la base de donn√©es
    if (!participant.mdp_participant) {
      console.error('Mot de passe introuvable pour cet utilisateur:', participant);
      return res.status(400).json({ message: 'Mot de passe introuvable pour cet utilisateur.' });

    }

    // Comparer le mot de passe fourni avec le hash dans la base de donn√©es
    const validPassword = await bcrypt.compare(password, participant.mdp_participant);
    console.log("R√©sultat de la comparaison des mots de passe :", validPassword);

    if (!validPassword) {
      return res.status(400).json({ message: 'Mot de passe incorrect.' });
    }

    //Cr√©er un token JWT
    const token = jwt.sign(
      { id: participant.id_participant, role: 'participant' },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );



    console.log('Connexion r√©ussie pour le participant:', participant.email_part);
    return res.status(200).json({
      message: 'Connexion r√©ussie (participant)',
      token,
    });
  } catch (error) {
    console.error('Erreur serveur :', error);
    return res.status(500).json({ message: 'Erreur serveur.', error });
  }
};

// Mettre √† jour le profil du participant
exports.updateParticipantProfile = async (req, res) => {
  const { participantId } = req.params;
  const { nom_part, prenom_part, email_part, telephone_part, genre_part, ville_part, codepostal_part, oldPassword, newPassword, confirmPassword } = req.body;

  try {
    const participant = await getParticipantByIdQuery(participantId);
    if (!participant) {
      return res.status(404).json({ message: "Participant non trouv√©." });
    }

    // V√©rifier si l'email est d√©j√† utilis√© par un autre utilisateur
    const existingEmail = await db('participants').where({ email_part }).whereNot({ id_participant: participantId }).first();
    if (existingEmail) {
      return res.status(400).json({ message: "Cet email est d√©j√† utilis√©." });
    }

    let updatedFields = {
      nom_part,
      prenom_part,
      email_part,
      telephone_part,
      genre_part,
      ville_part,
      codepostal_part
    };

    // Si l'utilisateur veut changer son mot de passe
    if (oldPassword && newPassword && confirmPassword) {
      const validPassword = await bcrypt.compare(oldPassword, participant.mdp_part);
      if (!validPassword) {
        return res.status(400).json({ message: "Ancien mot de passe incorrect." });
      }

      if (newPassword !== confirmPassword) {
        return res.status(400).json({ message: "Les nouveaux mots de passe ne correspondent pas." });
      }

      const salt = await bcrypt.genSalt(10);
      updatedFields.mdp_part = await bcrypt.hash(newPassword, salt);
    }

    // Mise √† jour des informations dans la base de donn√©es
    await updateParticipantQuery(participantId, updatedFields);

    return res.status(200).json({ message: "Profil mis √† jour avec succ√®s." });
  } catch (error) {
    console.error("Erreur lors de la mise √† jour du profil :", error);
    return res.status(500).json({ message: "Erreur serveur." });
  }
};


// R√©cup√©rer les √©v√©nements auxquels un participant est inscrit
exports.getInscribedEvents = async (req, res) => {
  try {
    console.log("üìå Token brut re√ßu dans l'en-t√™te:", req.headers.authorization);

    let participantId = req.userId || req.id_participant;

    if (!participantId && req.headers.authorization) {
      try {
        const token = req.headers.authorization.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        console.log("üìå Token d√©cod√© directement dans le contr√¥leur:", decoded);

        participantId = decoded.id_participant || decoded.id;
      } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification du token dans le contr√¥leur:", error.message);
      }
    }

    console.log("üìå ID du participant extrait du token:", participantId);

    if (!participantId) {
      console.error("‚ùå ID du participant introuvable.");
      return res.status(400).json({ message: "ID du participant manquant." });
    }

    console.log("üîç R√©cup√©ration des √©v√©nements pour le participant ID:", participantId);

    const events = await db('participer')
      .join('evenement', 'participer.id_evenement', '=', 'evenement.id_evenement')
      .where('participer.id_participant', participantId)
      .select(
        'evenement.id_evenement',
        'evenement.nom_event',
        'evenement.date_debut',
        'evenement.date_fin',
        'evenement.lieu_event',
        'evenement.logo_event',
        'evenement.type_event',
        'evenement.nbr_participant',
        'evenement.genre_participant',
        'evenement.categorie_participant',
        'evenement.frais_inscription',
        'evenement.statut_event',
        'evenement.description_accueil',
        'evenement.description_detail'
      );

    console.log("‚úÖ √âv√©nements trouv√©s:", events);
    res.status(200).json(events);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements inscrits :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};


// Contr√¥leur pour annuler une inscription
exports.unsubscribeFromEvent = async (req, res) => {
  try {
    const participantId = req.userId || req.id_participant;
    const { eventId } = req.params;

    if (!participantId || !eventId) {
      return res.status(400).json({ message: "ID du participant ou de l'√©v√©nement manquant." });
    }

    console.log("üîç Suppression de l'inscription de l'√©v√©nement :", eventId, "par le participant :", participantId);

    // V√©rifier si l'inscription existe
    const participation = await db('participer')
      .where({ id_participant: participantId, id_evenement: eventId })
      .first();

    if (!participation) {
      return res.status(404).json({ message: "Vous n'√™tes pas inscrit √† cet √©v√©nement." });
    }

    // Supprimer l'inscription
    await db('participer')
      .where({ id_participant: participantId, id_evenement: eventId })
      .del();

    console.log("‚úÖ Inscription annul√©e avec succ√®s !");
    return res.status(200).json({ message: "Votre inscription a √©t√© annul√©e avec succ√®s." });

  } catch (error) {
    console.error("‚ùå Erreur lors de l'annulation de l'inscription :", error);
    return res.status(500).json({ message: "Erreur serveur." });
  }
};
// pour Affichage des √©v√©nements
exports.getAllEvents = async (req, res) => {
  try {
    const events = await db('evenement')
      .select('id_evenement', 'nom_event');

    console.log("‚úÖ √âv√©nements trouv√©s:", events);
    res.status(200).json(events);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// üîπ R√©cup√©rer les √©v√©nements auxquels le participant est inscrit
exports.getParticipantEvents = async (req, res) => {
  try {
    console.log("üìå Token brut re√ßu dans l'en-t√™te:", req.headers.authorization);

    let participantId = req.userId || req.id_participant;

    // V√©rification du token si `participantId` n'est pas d√©fini
    if (!participantId && req.headers.authorization) {
      try {
        const token = req.headers.authorization.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üìå Token d√©cod√© dans `getParticipantEvents`:", decoded);
        participantId = decoded.id_participant || decoded.id;
      } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification du token:", error.message);
      }
    }

    console.log("üìå ID du participant extrait du token:", participantId);

    if (!participantId) {
      return res.status(400).json({ message: "ID du participant manquant." });
    }

    console.log("üîç R√©cup√©ration des √©v√©nements auxquels le participant ID:", participantId, "est inscrit.");

    // R√©cup√©rer les √©v√©nements du participant depuis la table `participer`
    const events = await db('participer')
      .join('evenement', 'participer.id_evenement', '=', 'evenement.id_evenement')
      .where('participer.id_participant', participantId)
      .select('evenement.id_evenement', 'evenement.nom_event');

    console.log("‚úÖ √âv√©nements trouv√©s:", events);
    res.status(200).json(events);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements inscrits:", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// üîπ **Cr√©er une √©quipe (stock√©e avec le participant)**
exports.createEquipe = async (req, res) => {
  try {
    console.log("üìå Token brut re√ßu dans l'en-t√™te:", req.headers.authorization);

    let participantId = req.userId || req.id_participant;

    if (!participantId && req.headers.authorization) {
      try {
        const token = req.headers.authorization.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üìå Token d√©cod√© dans `createEquipe`:", decoded);
        participantId = decoded.id_participant || decoded.id;
      } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification du token:", error.message);
      }
    }

    console.log("üìå ID du participant extrait du token:", participantId);

    if (!participantId) {
      return res.status(400).json({ message: "ID du participant manquant." });
    }

    const { nom_equipe, categorie_equipe, id_evenement } = req.body;

    if (!nom_equipe || !categorie_equipe || !id_evenement) {
      return res.status(400).json({ message: "Tous les champs sont obligatoires." });
    }

    console.log(`üîç Cr√©ation d'une √©quipe: ${nom_equipe} | Cat√©gorie: ${categorie_equipe} | √âv√©nement ID: ${id_evenement} | Participant ID: ${participantId}`);

    const [equipeId] = await db('equipes').insert({
      nom_equipe,
      categorie_equipe,
      id_participant: participantId,
      id_evenement
    });

    console.log("‚úÖ √âquipe cr√©√©e avec ID:", equipeId);
    res.status(201).json({ message: "√âquipe cr√©√©e avec succ√®s.", id_equipe: equipeId });

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de l'√©quipe:", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// üîπ Afficher les √©quipes du participant
// üîπ Afficher les √©quipes du participant avec le nom de l'√©v√©nement
exports.getMyTeams = async (req, res) => {
  try {
    console.log("üìå Token brut re√ßu dans l'en-t√™te:", req.headers.authorization);

    let participantId = req.userId || req.id_participant;

    if (!participantId && req.headers.authorization) {
      try {
        const token = req.headers.authorization.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üìå Token d√©cod√© dans `getMyTeams`:", decoded);
        participantId = decoded.id_participant || decoded.id;
      } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification du token:", error.message);
      }
    }

    console.log("üìå ID du participant extrait du token:", participantId);

    if (!participantId) {
      return res.status(400).json({ message: "ID du participant manquant." });
    }

    // üîç R√©cup√©ration des √©quipes du participant avec le nom de l'√©v√©nement
    const equipes = await db('equipes')
      .join('evenement', 'equipes.id_evenement', '=', 'evenement.id_evenement') // Ajout de la jointure
      .where({ 'equipes.id_participant': participantId })
      .select('equipes.id_equipe', 'equipes.nom_equipe', 'equipes.categorie_equipe', 'equipes.id_evenement', 'evenement.nom_event');

    console.log("‚úÖ √âquipes r√©cup√©r√©es:", equipes);
    res.status(200).json(equipes);

  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©quipes:", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};
// controler pour supprimer une √©quipe
exports.deleteEquipe = async (req, res) => {
  try {
    const { id } = req.params;
    await db('equipes').where({ id_equipe: id }).del();
    res.status(200).json({ message: "√âquipe supprim√©e avec succ√®s." });
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la suppression." });
  }
};

// Controler pour modifier une √©quipe
exports.updateEquipe = async (req, res) => {
  try {
    const { id } = req.params;
    const { nom_equipe, categorie_equipe } = req.body;

    await db('equipes').where({ id_equipe: id }).update({ nom_equipe, categorie_equipe });

    res.status(200).json({ message: "√âquipe mise √† jour avec succ√®s." });
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la mise √† jour." });
  }
};

// ‚úÖ Ajouter un joueur √† une √©quipe
exports.addJoueur = async (req, res) => {
  try {
      console.log("üìå Requ√™te re√ßue pour ajouter un joueur:", req.body);
      
      const { nom_joueur, prenom_joueur, date_naissance, sexe_joueur, email_joueur, tel_joueur, poste_joueur } = req.body;
      const { idEquipe } = req.params; // R√©cup√©rer l'ID de l'√©quipe depuis l'URL

      if (!nom_joueur || !prenom_joueur || !date_naissance || !sexe_joueur || !email_joueur || !tel_joueur || !poste_joueur) {
          return res.status(400).json({ message: "Tous les champs sont obligatoires." });
      }

      console.log(`üîç Ajout du joueur: ${nom_joueur} ${prenom_joueur}, Poste: ${poste_joueur}, √âquipe ID: ${idEquipe}`);

      const [joueurId] = await db('joueurs').insert({
          nom_joueur,
          prenom_joueur,
          date_naissance,
          sexe_joueur,
          email_joueur,
          tel_joueur,
          poste_joueur,
          id_equipe: idEquipe
      });

      console.log("‚úÖ Joueur ajout√© avec ID:", joueurId);
      res.status(201).json({ message: "Joueur ajout√© avec succ√®s.", id_joueur: joueurId });

  } catch (error) {
      console.error("‚ùå Erreur lors de l'ajout du joueur:", error);
      res.status(500).json({ message: "Erreur serveur." });
  }
};

// ‚úÖ R√©cup√©rer les joueurs d'une √©quipe
exports.getJoueursByEquipe = async (req, res) => {
  try {
      const { idEquipe } = req.params; // R√©cup√©rer l'ID de l'√©quipe depuis l'URL

      console.log(`üìå R√©cup√©ration des joueurs pour l'√©quipe ID: ${idEquipe}`);

      // V√©rification si l'√©quipe existe
      const equipe = await db('equipes').where({ id_equipe: idEquipe }).first();
      if (!equipe) {
          return res.status(404).json({ message: "√âquipe non trouv√©e." });
      }

      // R√©cup√©ration des joueurs de cette √©quipe
      const joueurs = await db('joueurs').where({ id_equipe: idEquipe }).select('*');

      console.log("‚úÖ Joueurs r√©cup√©r√©s:", joueurs);
      res.status(200).json(joueurs);

  } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des joueurs:", error);
      res.status(500).json({ message: "Erreur serveur." });
  }
};

// üîπ Modifier un joueur
exports.updateJoueur = async (req, res) => {
  try {
    const { id } = req.params;
    const { nom_joueur, prenom_joueur, date_naissance, sexe_joueur, email_joueur, tel_joueur, poste_joueur } = req.body;

    // V√©rifier si le joueur existe
    const joueur = await db('joueurs').where({ id_joueur: id }).first();
    if (!joueur) {
      return res.status(404).json({ message: "Joueur non trouv√©." });
    }

    // Mise √† jour du joueur
    await db('joueurs').where({ id_joueur: id }).update({
      nom_joueur, prenom_joueur, date_naissance, sexe_joueur, email_joueur, tel_joueur, poste_joueur
    });

    res.status(200).json({ message: "Joueur mis √† jour avec succ√®s." });
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour du joueur:", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// üîπ Supprimer un joueur
exports.deleteJoueur = async (req, res) => {
  try {
    const { id } = req.params;

    // V√©rifier si le joueur existe
    const joueur = await db('joueurs').where({ id_joueur: id }).first();
    if (!joueur) {
      return res.status(404).json({ message: "Joueur non trouv√©." });
    }

    // Supprimer le joueur
    await db('joueurs').where({ id_joueur: id }).del();

    res.status(200).json({ message: "Joueur supprim√© avec succ√®s." });
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression du joueur:", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};



