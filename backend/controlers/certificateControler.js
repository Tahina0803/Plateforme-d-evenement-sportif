const {
    addCertificate,
    getParticipantById,
    getAllCertificates,
    getCertificatesByParticipant,
} = require('../queries'); // V√©rifie que le chemin est correct
const db = require('./../db');


exports.distributeCertificate = async (req, res) => {
    const { id } = req.params; // ID du participant
    let { id_evenement, adminId } = req.body; // ID de l'√©v√©nement et de l'admin

    console.log("üì© Donn√©es re√ßues :", req.body); // ‚úÖ V√©rifier si adminId est bien pr√©sent

    // V√©rifier si adminId est d√©fini, sinon attribuer une valeur par d√©faut
    if (!adminId) {
        console.warn("‚ö†Ô∏è Aucun adminId re√ßu, attribution d'une valeur par d√©faut.");
        adminId = 1; // üõ† Remplacez 1 par un ID valide si n√©cessaire
    }

    try {
        if (!id_evenement) {
            return res.status(400).json({ message: "L'ID de l'√©v√©nement est requis pour distribuer un certificat." });
        }

        const evenement = await db("evenement").where("id_evenement", id_evenement).first();
        if (!evenement) {
            return res.status(404).json({ message: "√âv√©nement non trouv√©" });
        }

        const participant = await getParticipantById(id);
        if (!participant || !participant.nom_part) {
            return res.status(404).json({ message: "Participant non trouv√© ou nom invalide" });
        }

        console.log("üîç Participant trouv√© :", participant);
        console.log("üìÜ √âv√©nement trouv√© :", evenement);

        const certificateData = {
            type_certificat: "Certificat de participation",
            nom_titulaire: participant.nom_part,
            date_certificat: new Date(),
            url_certificat: `https://mon-site.com/certificats/${id}.pdf`,
            id_admin: adminId, // ‚úÖ V√©rification et correction ici
            id_participant: id,
            id_evenement: id_evenement,
            date_distribution: new Date()
        };

        console.log("üì© Donn√©es du certificat √† ins√©rer :", certificateData);

        await addCertificate(certificateData);

        res.status(200).json({ message: `Certificat distribu√© avec succ√®s √† ${participant.nom_part} pour l'√©v√©nement ${evenement.nom_event} !` });
    } catch (error) {
        console.error("‚ùå Erreur distribution certificat :", error);
        res.status(500).json({ message: "Erreur lors de la distribution du certificat", error });
    }
};


// R√©cup√©rer tous les certificats
exports.getAllCertificates = async (req, res) => {
    try {
        const certificates = await getAllCertificates();
        res.status(200).json(certificates);
    } catch (error) {
        console.error("‚ùå Erreur r√©cup√©ration certificats :", error);
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des certificats", error });
    }
};

// R√©cup√©rer un certificat par participant
exports.getCertificatesByParticipant = async (req, res) => {
    const { id } = req.params;

    try {
        const certificates = await getCertificatesByParticipant(id); // Correction ici
        if (!certificates || certificates.length === 0) {
            return res.status(404).json({ message: "Aucun certificat trouv√© pour ce participant" });
        }
        res.status(200).json(certificates);
    } catch (error) {
        console.error("‚ùå Erreur r√©cup√©ration certificat :", error);
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration du certificat", error });
    }
};

// Supprimer un certificat par ID
exports.deleteCertificate = async (req, res) => {
    const { id } = req.params;

    try {
        // V√©rifier si le certificat existe
        const certificat = await db("certificat").where("id_certificat", id).first();
        if (!certificat) {
            return res.status(404).json({ message: "Certificat non trouv√©" });
        }

        // Supprimer le certificat
        await db("certificat").where("id_certificat", id).del();

        res.status(200).json({ message: "Certificat supprim√© avec succ√®s" });
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression du certificat :", error);
        res.status(500).json({ message: "Erreur lors de la suppression du certificat", error });
    }
};
